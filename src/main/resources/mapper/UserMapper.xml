<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.stictch.dao.UserDao">
    <resultMap id="user" type="com.stictch.entity.User">
        <result property="userId" column="user_id"/>
        <result property="userName" column="user_name"/>
        <result property="passWord" column="user_password"/>
        <result property="gender" column="user_gender"/>
        <result property="age" column="user_age"/>
        <result property="phone" column="user_phone"/>
        <result property="picture" column="user_picture"/>
        <result property="email" column="user_email"/>
        <result property="special" column="user_special"/>
        <result property="companyLocation" column="user_company_location"/>
        <result property="companyName" column="user_company_name"/>
        <result property="license" column="user_company_license"/>

    </resultMap>
    <resultMap id="userWithRole" type="com.stictch.entity.User" extends="user">
        <collection property="roles" ofType="com.stictch.entity.Role">
            <id property="roleId" column="role_id"/>
            <result property="roleName" column="role_name"/>
        </collection>
    </resultMap>


    <select id="findByUserName" parameterType="String" resultMap="user">
        select user_id,user_name,user_password from user where
        <if test="userName!=null and userName !=''">
            user_name = #{userName}
        </if>
    </select>
    <select id="userLogin" resultMap="user">
        select user_name, user_password
        from user
        where user_name = #{userName}
          and user_password = #{passWord};
    </select>
    <select id="getUserRolesById" resultType="com.stictch.entity.Role">
        select role.*, user.user_id, user_role.*
        from role
                 left join user_role on role.role_id = user_role.role_id
                 left join user on user_role.user_id = user.user_id
        where user.user_id = #{id}
        #         select r.*
#         from role r,
#              user_role hrr,
#              user u left join user_role ur on r.role_id = ur.role_id
#         where hrr.role_id = r.role_id
#           and u.user_id = #{id}

    </select>
    <select id="loadUserByUserName" resultMap="user">
        select *
        from user
        where user_name = #{userName}
    </select>
    <select id="getAllUsers" resultMap="userWithRole">
        select u.user_id,
        u.user_name,
        u.user_age,
        u.user_gender,
        u.user_phone,
        u.user_picture,
        u.user_company_name,
        u.user_company_location,
        u.user_email,
        u.user_special
        from user u
        left join user_role hrr on u.user_id = hrr.user_id
        left join role r on hrr.role_id = r.role_id
        where u.user_id != #{userId}
        <if test="keywords !=null">and u.user_name like concat('%',#{keywords},'%')</if>
        order by u.user_id
    </select>
    <select id="findUserById" resultMap="userWithRole" parameterType="Integer">
        select r.*,u.user_id, u.user_name, u.user_age, u.user_gender,u.user_phone, u.user_picture,u. user_company_name,
        u.user_company_location, u.user_email,u. user_special ,r.role_name from user u
        left join user_role ur on u.user_id =
        ur.user_id
        left join role r on ur.role_id = r.role_id
        where
        <if test="userId != 0 ">
            u.user_id=#{userId}
        </if>
    </select>

    <insert id="userRegister" parameterType="com.stictch.entity.User">
        insert into user(user_name, user_password, user_phone, user_email)
        values (#{userName}, (#{passWord}), #{phone}, #{email})
    </insert>
    <update id="companyUseraddLicense" parameterType="com.stictch.entity.User">
        update user
        <set>
            <if test="companyName != null and companyName != ''">
                user_company_name=#{companyName},
            </if>
            <if test="companyLocation != null">
                user_company_location=#{companyLocation},
            </if>
            <if test="license != null">
                user_company_license=#{license},
            </if>
        </set>
        where user_id=#{userId}
    </update>
    <update id="updateUser" parameterType="com.stictch.entity.User" statementType="PREPARED">
        update user
        <set>
            <if test="userName != null and userName != ''">
                user_name = #{userName},
            </if>
            <if test="age != null and age != 0 and age != ''">
                user_age= #{age},
            </if>
            <if test="gender != null and gender != '' ">
                user_gender= #{gender},
            </if>
            <if test="special != null and special != ''">
                user_special= #{special},
            </if>

        </set>
        where user_id = #{userId}
    </update>
    <update id="userAddAvatar" parameterType="com.stictch.entity.User">
        update user
        <set>
            <if test="avatar != null and  avater != ''">
                user_picture=#{avatar}
            </if>

        </set>
        where user_id#{userId}
    </update>
    <delete id="deleteUserById" parameterType="Integer">
        delete
        from user
        where user_id = #{id}
    </delete>
</mapper>